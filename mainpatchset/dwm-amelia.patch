diff -crB dwm-vanilla/config.def.h dwm-main/config.def.h
*** dwm-vanilla/config.def.h	2011-12-19 07:02:46.000000000 -0800
--- dwm-main/config.def.h	2015-10-30 16:21:28.990951608 -0700
***************
*** 1,31 ****
  /* See LICENSE file for copyright and license details. */
  
  /* appearance */
! static const char font[]            = "-*-terminus-medium-r-*-*-16-*-*-*-*-*-*-*";
! static const char normbordercolor[] = "#444444";
! static const char normbgcolor[]     = "#222222";
! static const char normfgcolor[]     = "#bbbbbb";
! static const char selbordercolor[]  = "#005577";
! static const char selbgcolor[]      = "#005577";
! static const char selfgcolor[]      = "#eeeeee";
! static const unsigned int borderpx  = 1;        /* border pixel of windows */
! static const unsigned int snap      = 32;       /* snap pixel */
  static const Bool showbar           = True;     /* False means no bar */
  static const Bool topbar            = True;     /* False means bottom bar */
  
  /* tagging */
! static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
  
  static const Rule rules[] = {
! 	/* class      instance    title       tags mask     isfloating   monitor */
! 	{ "Gimp",     NULL,       NULL,       0,            True,        -1 },
! 	{ "Firefox",  NULL,       NULL,       1 << 8,       False,       -1 },
  };
  
  /* layout(s) */
! static const float mfact      = 0.55; /* factor of master area size [0.05..0.95] */
  static const int nmaster      = 1;    /* number of clients in master area */
! static const Bool resizehints = True; /* True means respect size hints in tiled resizals */
  
  static const Layout layouts[] = {
  	/* symbol     arrange function */
--- 1,48 ----
  /* See LICENSE file for copyright and license details. */
  
  /* appearance */
! static const char font[]            = "Source Code Pro:pixelsize=18:antialias=true";
! static const char normbordercolor[] = "#282828";
! static const char normbgcolor[]     = "#282828";
! static const char normfgcolor[]     = "#EBDBB2";
! static const char selbordercolor[]  = "#B16286";
! static const char selbgcolor[]      = "#B16286";
! static const char selfgcolor[]      = "#EBDBB2";
! static const char occbordercolor[]  = "#458588";
! static const char occbgcolor[]      = "#458588";
! static const char occfgcolor[]      = "#EBDBB2";
! static const unsigned int borderpx  = 0;        /* border pixel of windows */
! static const unsigned int snap      = 0;       /* snap pixel */
  static const Bool showbar           = True;     /* False means no bar */
  static const Bool topbar            = True;     /* False means bottom bar */
  
  /* tagging */
! static const char *tags[] = { "web", "chat", "term", "music", "code", "steam", "game", "misc" };
  
  static const Rule rules[] = {
! 	/* class              instance    title                      tags mask     isfloating   monitor */
! 	//Browsers
! 	{ "chromium-browser", NULL,       NULL,                      1 << 0,       False        -1 },
! 	{ "Firefox",          NULL,       NULL,                      1 << 0,       False,       -1 },
! 	//Terminals
! 	{ "st-256color",      NULL,       "st",                      1 << 2,       False,       -1 },
! 	//Terminal Applications
! 	{ NULL,               NULL,       "IRC",                     1 << 1,       False,       -1 },
! 	{ NULL,               NULL,       "Music",                   1 << 3,       False,       -1 },
! 	//Steam
! 	{ "Steam",            NULL,       NULL,                      1 << 5,       False,       -1 },
! 	//Games
! 	{ NULL,               NULL,       "CavesOfQud",              1 << 6,       False,       -1 },
! 	{ NULL,               NULL,       "Risk Of Rain",            1 << 6,       False,       -1 },
! 	{ NULL,               NULL,       "Planetary Annihilation",  1 << 6,       False,       -1 },
! 	//Misc
! 	{ "Pavucontrol",      NULL,       NULL,                      1 << 7,       False,       -1 },
  };
  
  /* layout(s) */
! static const float mfact      = 0.60; /* factor of master area size [0.05..0.95] */
  static const int nmaster      = 1;    /* number of clients in master area */
! static const Bool resizehints = False; /* True means respect size hints in tiled resizals */
  
  static const Layout layouts[] = {
  	/* symbol     arrange function */
***************
*** 35,44 ****
  };
  
  /* key definitions */
! #define MODKEY Mod1Mask
  #define TAGKEYS(KEY,TAG) \
! 	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
! 	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
  	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
  	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
  
--- 52,61 ----
  };
  
  /* key definitions */
! #define MODKEY Mod4Mask
  #define TAGKEYS(KEY,TAG) \
! 	{ MODKEY|ControlMask,           KEY,      view,           {.ui = 1 << TAG} }, \
! 	{ MODKEY,                       KEY,      toggleview,     {.ui = 1 << TAG} }, \
  	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
  	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },
  
***************
*** 47,65 ****
  
  /* commands */
  static const char *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
! static const char *termcmd[]  = { "uxterm", NULL };
  
  static Key keys[] = {
  	/* modifier                     key        function        argument */
  	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
  	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
  	{ MODKEY,                       XK_b,      togglebar,      {0} },
! 	{ MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
! 	{ MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
  	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
  	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
! 	{ MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
! 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
  	{ MODKEY,                       XK_Return, zoom,           {0} },
  	{ MODKEY,                       XK_Tab,    view,           {0} },
  	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
--- 64,82 ----
  
  /* commands */
  static const char *dmenucmd[] = { "dmenu_run", "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
! static const char *termcmd[]  = { "st", NULL };
  
  static Key keys[] = {
  	/* modifier                     key        function        argument */
  	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
  	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
  	{ MODKEY,                       XK_b,      togglebar,      {0} },
! 	{ MODKEY,                       XK_k,      focusstack,     {.i = +1 } },
! 	{ MODKEY,                       XK_h,      focusstack,     {.i = -1 } },
  	{ MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
  	{ MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
! 	{ MODKEY,                       XK_j,      setmfact,       {.f = -0.03} },
! 	{ MODKEY,                       XK_l,      setmfact,       {.f = +0.03} },
  	{ MODKEY,                       XK_Return, zoom,           {0} },
  	{ MODKEY,                       XK_Tab,    view,           {0} },
  	{ MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
***************
*** 81,88 ****
  	TAGKEYS(                        XK_5,                      4)
  	TAGKEYS(                        XK_6,                      5)
  	TAGKEYS(                        XK_7,                      6)
! 	TAGKEYS(                        XK_8,                      7)
! 	TAGKEYS(                        XK_9,                      8)
  	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
  };
  
--- 98,104 ----
  	TAGKEYS(                        XK_5,                      4)
  	TAGKEYS(                        XK_6,                      5)
  	TAGKEYS(                        XK_7,                      6)
! 	TAGKEYS(                        XK_grave,                  7)
  	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
  };
  
diff -crB dwm-vanilla/config.mk dwm-main/config.mk
*** dwm-vanilla/config.mk	2011-12-19 07:02:46.000000000 -0800
--- dwm-main/config.mk	2015-10-30 15:50:43.881091191 -0700
***************
*** 15,22 ****
  XINERAMAFLAGS = -DXINERAMA
  
  # includes and libs
! INCS = -I. -I/usr/include -I${X11INC}
! LIBS = -L/usr/lib -lc -L${X11LIB} -lX11 ${XINERAMALIBS}
  
  # flags
  CPPFLAGS = -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
--- 15,22 ----
  XINERAMAFLAGS = -DXINERAMA
  
  # includes and libs
! INCS = -I. -I/usr/include -I${X11INC} -I/usr/include/freetype2
! LIBS = -L/usr/lib -lc -L${X11LIB} -lX11 ${XINERAMALIBS} -lfontconfig -lXft
  
  # flags
  CPPFLAGS = -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
diff -crB dwm-vanilla/dwm.c dwm-main/dwm.c
*** dwm-vanilla/dwm.c	2011-12-19 07:02:46.000000000 -0800
--- dwm-main/dwm.c	2015-10-30 15:51:24.754004081 -0700
***************
*** 39,44 ****
--- 39,45 ----
  #ifdef XINERAMA
  #include <X11/extensions/Xinerama.h>
  #endif /* XINERAMA */
+ #include <X11/Xft/Xft.h>
  
  /* macros */
  #define BUTTONMASK              (ButtonPressMask|ButtonReleaseMask)
***************
*** 99,114 ****
  
  typedef struct {
  	int x, y, w, h;
! 	unsigned long norm[ColLast];
! 	unsigned long sel[ColLast];
  	Drawable drawable;
  	GC gc;
  	struct {
  		int ascent;
  		int descent;
  		int height;
! 		XFontSet set;
! 		XFontStruct *xfont;
  	} font;
  } DC; /* draw context */
  
--- 100,115 ----
  
  typedef struct {
  	int x, y, w, h;
! 	XftColor norm[ColLast];
! 	XftColor sel[ColLast];
! 	XftColor occ[ColLast];
  	Drawable drawable;
  	GC gc;
  	struct {
  		int ascent;
  		int descent;
  		int height;
! 		XftFont *xfont;
  	} font;
  } DC; /* draw context */
  
***************
*** 160,165 ****
--- 161,167 ----
  static void arrange(Monitor *m);
  static void arrangemon(Monitor *m);
  static void attach(Client *c);
+ static void attachabove(Client *c);
  static void attachstack(Client *c);
  static void buttonpress(XEvent *e);
  static void checkotherwm(void);
***************
*** 178,192 ****
  static Monitor *dirtomon(int dir);
  static void drawbar(Monitor *m);
  static void drawbars(void);
! static void drawsquare(Bool filled, Bool empty, Bool invert, unsigned long col[ColLast]);
! static void drawtext(const char *text, unsigned long col[ColLast], Bool invert);
  static void enternotify(XEvent *e);
  static void expose(XEvent *e);
  static void focus(Client *c);
  static void focusin(XEvent *e);
  static void focusmon(const Arg *arg);
  static void focusstack(const Arg *arg);
! static unsigned long getcolor(const char *colstr);
  static Bool getrootptr(int *x, int *y);
  static long getstate(Window w);
  static Bool gettextprop(Window w, Atom atom, char *text, unsigned int size);
--- 180,194 ----
  static Monitor *dirtomon(int dir);
  static void drawbar(Monitor *m);
  static void drawbars(void);
! static void drawsquare(Bool filled, Bool empty, Bool invert, XftColor col[ColLast]);
! static void drawtext(const char *text, XftColor col[ColLast], Bool invert);
  static void enternotify(XEvent *e);
  static void expose(XEvent *e);
  static void focus(Client *c);
  static void focusin(XEvent *e);
  static void focusmon(const Arg *arg);
  static void focusstack(const Arg *arg);
! static XftColor getcolor(const char *colstr);
  static Bool getrootptr(int *x, int *y);
  static long getstate(Window w);
  static Bool gettextprop(Window w, Atom atom, char *text, unsigned int size);
***************
*** 418,423 ****
--- 420,438 ----
  }
  
  void
+ attachabove(Client *c) {
+ 	if(c->mon->sel == NULL || c->mon->sel == c->mon->clients || c->mon->sel->isfloating) {
+ 		attach(c);
+ 		return;
+ 	}
+ 
+ 	Client *at;
+ 	for(at = c->mon->clients; at->next != c->mon->sel; at = at->next);
+ 	c->next = at->next;
+ 	at->next = c;
+ }
+ 
+ void
  attachstack(Client *c) {
  	c->snext = c->mon->stack;
  	c->mon->stack = c;
***************
*** 485,494 ****
  	for(m = mons; m; m = m->next)
  		while(m->stack)
  			unmanage(m->stack, False);
- 	if(dc.font.set)
- 		XFreeFontSet(dpy, dc.font.set);
- 	else
- 		XFreeFont(dpy, dc.font.xfont);
  	XUngrabKey(dpy, AnyKey, AnyModifier, root);
  	XFreePixmap(dpy, dc.drawable);
  	XFreeGC(dpy, dc.gc);
--- 500,505 ----
***************
*** 719,725 ****
  drawbar(Monitor *m) {
  	int x;
  	unsigned int i, occ = 0, urg = 0;
! 	unsigned long *col;
  	Client *c;
  
  	for(c = m->clients; c; c = c->next) {
--- 730,736 ----
  drawbar(Monitor *m) {
  	int x;
  	unsigned int i, occ = 0, urg = 0;
! 	XftColor *col;
  	Client *c;
  
  	for(c = m->clients; c; c = c->next) {
***************
*** 730,739 ****
  	dc.x = 0;
  	for(i = 0; i < LENGTH(tags); i++) {
  		dc.w = TEXTW(tags[i]);
! 		col = m->tagset[m->seltags] & 1 << i ? dc.sel : dc.norm;
  		drawtext(tags[i], col, urg & 1 << i);
- 		drawsquare(m == selmon && selmon->sel && selmon->sel->tags & 1 << i,
- 		           occ & 1 << i, urg & 1 << i, col);
  		dc.x += dc.w;
  	}
  	dc.w = blw = TEXTW(m->ltsymbol);
--- 741,748 ----
  	dc.x = 0;
  	for(i = 0; i < LENGTH(tags); i++) {
  		dc.w = TEXTW(tags[i]);
! 		col = (m->tagset[m->seltags] & 1 << i) ? dc.sel : (occ &  1 << i ? dc.occ : dc.norm);
  		drawtext(tags[i], col, urg & 1 << i);
  		dc.x += dc.w;
  	}
  	dc.w = blw = TEXTW(m->ltsymbol);
***************
*** 774,783 ****
  }
  
  void
! drawsquare(Bool filled, Bool empty, Bool invert, unsigned long col[ColLast]) {
  	int x;
  
! 	XSetForeground(dpy, dc.gc, col[invert ? ColBG : ColFG]);
  	x = (dc.font.ascent + dc.font.descent + 2) / 4;
  	if(filled)
  		XFillRectangle(dpy, dc.drawable, dc.gc, dc.x+1, dc.y+1, x+1, x+1);
--- 783,792 ----
  }
  
  void
! drawsquare(Bool filled, Bool empty, Bool invert, XftColor col[ColLast]) {
  	int x;
  
! 	XSetForeground(dpy, dc.gc, col[invert ? ColBG : ColFG].pixel);
  	x = (dc.font.ascent + dc.font.descent + 2) / 4;
  	if(filled)
  		XFillRectangle(dpy, dc.drawable, dc.gc, dc.x+1, dc.y+1, x+1, x+1);
***************
*** 786,796 ****
  }
  
  void
! drawtext(const char *text, unsigned long col[ColLast], Bool invert) {
  	char buf[256];
  	int i, x, y, h, len, olen;
  
! 	XSetForeground(dpy, dc.gc, col[invert ? ColFG : ColBG]);
  	XFillRectangle(dpy, dc.drawable, dc.gc, dc.x, dc.y, dc.w, dc.h);
  	if(!text)
  		return;
--- 795,806 ----
  }
  
  void
! drawtext(const char *text, XftColor col[ColLast], Bool invert) {
  	char buf[256];
  	int i, x, y, h, len, olen;
+ 	XftDraw *d;
  
! 	XSetForeground(dpy, dc.gc, col[invert ? ColFG : ColBG].pixel);
  	XFillRectangle(dpy, dc.drawable, dc.gc, dc.x, dc.y, dc.w, dc.h);
  	if(!text)
  		return;
***************
*** 805,815 ****
  	memcpy(buf, text, len);
  	if(len < olen)
  		for(i = len; i && i > len - 3; buf[--i] = '.');
! 	XSetForeground(dpy, dc.gc, col[invert ? ColBG : ColFG]);
! 	if(dc.font.set)
! 		XmbDrawString(dpy, dc.drawable, dc.font.set, dc.gc, x, y, buf, len);
! 	else
! 		XDrawString(dpy, dc.drawable, dc.gc, x, y, buf, len);
  }
  
  void
--- 815,825 ----
  	memcpy(buf, text, len);
  	if(len < olen)
  		for(i = len; i && i > len - 3; buf[--i] = '.');
! 
! 	d = XftDrawCreate(dpy, dc.drawable, DefaultVisual(dpy, screen), DefaultColormap(dpy,screen));
! 
! 	XftDrawStringUtf8(d, &col[invert ? ColBG : ColFG], dc.font.xfont, x, y, (XftChar8 *) buf, len);
! 	XftDrawDestroy(d);
  }
  
  void
***************
*** 855,861 ****
  		detachstack(c);
  		attachstack(c);
  		grabbuttons(c, True);
! 		XSetWindowBorder(dpy, c->win, dc.sel[ColBorder]);
  		setfocus(c);
  	}
  	else
--- 865,871 ----
  		detachstack(c);
  		attachstack(c);
  		grabbuttons(c, True);
! 		XSetWindowBorder(dpy, c->win, dc.sel[ColBorder].pixel);
  		setfocus(c);
  	}
  	else
***************
*** 926,939 ****
  	return atom;
  }
  
! unsigned long
  getcolor(const char *colstr) {
! 	Colormap cmap = DefaultColormap(dpy, screen);
! 	XColor color;
  
! 	if(!XAllocNamedColor(dpy, cmap, colstr, &color, &color))
  		die("error, cannot allocate color '%s'\n", colstr);
! 	return color.pixel;
  }
  
  Bool
--- 936,949 ----
  	return atom;
  }
  
! XftColor 
  getcolor(const char *colstr) {
! 	XftColor color;
  
! 	if(!XftColorAllocName(dpy, DefaultVisual(dpy, screen), DefaultColormap(dpy, screen), colstr, &color))
  		die("error, cannot allocate color '%s'\n", colstr);
! 
! 	return color;
  }
  
  Bool
***************
*** 1034,1068 ****
  
  void
  initfont(const char *fontstr) {
- 	char *def, **missing;
- 	int n;
  
! 	dc.font.set = XCreateFontSet(dpy, fontstr, &missing, &n, &def);
! 	if(missing) {
! 		while(n--)
! 			fprintf(stderr, "dwm: missing fontset: %s\n", missing[n]);
! 		XFreeStringList(missing);
! 	}
! 	if(dc.font.set) {
! 		XFontStruct **xfonts;
! 		char **font_names;
! 
! 		dc.font.ascent = dc.font.descent = 0;
! 		XExtentsOfFontSet(dc.font.set);
! 		n = XFontsOfFontSet(dc.font.set, &xfonts, &font_names);
! 		while(n--) {
! 			dc.font.ascent = MAX(dc.font.ascent, (*xfonts)->ascent);
! 			dc.font.descent = MAX(dc.font.descent,(*xfonts)->descent);
! 			xfonts++;
! 		}
! 	}
! 	else {
! 		if(!(dc.font.xfont = XLoadQueryFont(dpy, fontstr))
! 		&& !(dc.font.xfont = XLoadQueryFont(dpy, "fixed")))
! 			die("error, cannot load font: '%s'\n", fontstr);
! 		dc.font.ascent = dc.font.xfont->ascent;
! 		dc.font.descent = dc.font.xfont->descent;
! 	}
  	dc.font.height = dc.font.ascent + dc.font.descent;
  }
  
--- 1044,1056 ----
  
  void
  initfont(const char *fontstr) {
  
! 	if(!(dc.font.xfont = XftFontOpenName(dpy,screen,fontstr))
! 	&& !(dc.font.xfont = XftFontOpenName(dpy,screen,"fixed")))
! 		die("error, cannot load font: '%s'\n", fontstr);
! 
! 	dc.font.ascent = dc.font.xfont->ascent;
! 	dc.font.descent = dc.font.xfont->descent;
  	dc.font.height = dc.font.ascent + dc.font.descent;
  }
  
***************
*** 1144,1150 ****
  
  	wc.border_width = c->bw;
  	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
! 	XSetWindowBorder(dpy, w, dc.norm[ColBorder]);
  	configure(c); /* propagates border_width, if size doesn't change */
  	updatewindowtype(c);
  	updatesizehints(c);
--- 1132,1138 ----
  
  	wc.border_width = c->bw;
  	XConfigureWindow(dpy, w, CWBorderWidth, &wc);
! 	XSetWindowBorder(dpy, w, dc.norm[ColBorder].pixel);
  	configure(c); /* propagates border_width, if size doesn't change */
  	updatewindowtype(c);
  	updatesizehints(c);
***************
*** 1155,1161 ****
  		c->isfloating = c->oldstate = trans != None || c->isfixed;
  	if(c->isfloating)
  		XRaiseWindow(dpy, c->win);
! 	attach(c);
  	attachstack(c);
  	XMoveResizeWindow(dpy, c->win, c->x + 2 * sw, c->y, c->w, c->h); /* some windows require this */
  	setclientstate(c, NormalState);
--- 1143,1149 ----
  		c->isfloating = c->oldstate = trans != None || c->isfixed;
  	if(c->isfloating)
  		XRaiseWindow(dpy, c->win);
! 	attachabove(c);
  	attachstack(c);
  	XMoveResizeWindow(dpy, c->win, c->x + 2 * sw, c->y, c->w, c->h); /* some windows require this */
  	setclientstate(c, NormalState);
***************
*** 1480,1486 ****
  	detachstack(c);
  	c->mon = m;
  	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
! 	attach(c);
  	attachstack(c);
  	focus(NULL);
  	arrange(NULL);
--- 1468,1474 ----
  	detachstack(c);
  	c->mon = m;
  	c->tags = m->tagset[m->seltags]; /* assign tags of target monitor */
! 	attachabove(c);
  	attachstack(c);
  	focus(NULL);
  	arrange(NULL);
***************
*** 1618,1628 ****
  	dc.sel[ColBorder] = getcolor(selbordercolor);
  	dc.sel[ColBG] = getcolor(selbgcolor);
  	dc.sel[ColFG] = getcolor(selfgcolor);
  	dc.drawable = XCreatePixmap(dpy, root, DisplayWidth(dpy, screen), bh, DefaultDepth(dpy, screen));
  	dc.gc = XCreateGC(dpy, root, 0, NULL);
  	XSetLineAttributes(dpy, dc.gc, 1, LineSolid, CapButt, JoinMiter);
- 	if(!dc.font.set)
- 		XSetFont(dpy, dc.gc, dc.font.xfont->fid);
  	/* init bars */
  	updatebars();
  	updatestatus();
--- 1606,1617 ----
  	dc.sel[ColBorder] = getcolor(selbordercolor);
  	dc.sel[ColBG] = getcolor(selbgcolor);
  	dc.sel[ColFG] = getcolor(selfgcolor);
+ 	dc.occ[ColBorder] = getcolor(occbordercolor);
+ 	dc.occ[ColBG] = getcolor(occbgcolor);
+ 	dc.occ[ColFG] = getcolor(occfgcolor);
  	dc.drawable = XCreatePixmap(dpy, root, DisplayWidth(dpy, screen), bh, DefaultDepth(dpy, screen));
  	dc.gc = XCreateGC(dpy, root, 0, NULL);
  	XSetLineAttributes(dpy, dc.gc, 1, LineSolid, CapButt, JoinMiter);
  	/* init bars */
  	updatebars();
  	updatestatus();
***************
*** 1692,1704 ****
  
  int
  textnw(const char *text, unsigned int len) {
! 	XRectangle r;
! 
! 	if(dc.font.set) {
! 		XmbTextExtents(dc.font.set, text, len, NULL, &r);
! 		return r.width;
! 	}
! 	return XTextWidth(dc.font.xfont, text, len);
  }
  
  void
--- 1681,1689 ----
  
  int
  textnw(const char *text, unsigned int len) {
! 	XGlyphInfo ext;
! 	XftTextExtentsUtf8(dpy, dc.font.xfont, (XftChar8 *) text, len, &ext);
! 	return ext.xOff;
  }
  
  void
***************
*** 1776,1782 ****
  	if(!c)
  		return;
  	grabbuttons(c, False);
! 	XSetWindowBorder(dpy, c->win, dc.norm[ColBorder]);
  	if(setfocus)
  		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
  }
--- 1761,1767 ----
  	if(!c)
  		return;
  	grabbuttons(c, False);
! 	XSetWindowBorder(dpy, c->win, dc.norm[ColBorder].pixel);
  	if(setfocus)
  		XSetInputFocus(dpy, root, RevertToPointerRoot, CurrentTime);
  }
***************
*** 1900,1906 ****
  					m->clients = c->next;
  					detachstack(c);
  					c->mon = mons;
! 					attach(c);
  					attachstack(c);
  				}
  				if(m == selmon)
--- 1885,1891 ----
  					m->clients = c->next;
  					detachstack(c);
  					c->mon = mons;
! 					attachabove(c);
  					attachstack(c);
  				}
  				if(m == selmon)
